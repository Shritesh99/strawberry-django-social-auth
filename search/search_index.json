{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Strawberry-django Social Auth \u00b6 Django social authentication with Strawberry using Social Django . About \u00b6 This Library was inspired by Django-graphql-social-auth . \u00b6 Django Social Auth for Strawberry Graphql engine. Docs can be found here \u00b6 Features \u00b6 Awesome docs! Social Auth Profile pic's URL storage in User's model Relay Support (Coming Soon...) Installation: \u00b6 pip install strawberry - django - social - auth - Add this for Avatar support in settings.py SOCIAL_AUTH_PIPELINE = [ ... 'gql_social_auth.pipeline.get_avatar' , # Get Avatar Pipeline ] Usage: \u00b6 Use built-In Mutation @strawberry . type class Mutation : social_auth = mutations . SocialAuth . field schema = strawberry . Schema ( query = Query , mutation = Mutation ) Customize the Usage of Mutation using the decorator from gql_social_auth.decorators import social_auth from gql_social_auth.types import SocialAuthInput @strawberry . type class CustomMutation : @strawberry . mutation @social_auth def social_auth ( self , info : Info , _input : SocialAuthInput , user , errors ) -> CustomReturnType : # user: User object from model # errors: If any errors occurred during the process of getting the social auth # Note: Any of the user or errors is None at a time, both can't be None at the same time... if errors is not None : # Handle Error here # Use user Object here... Calling: \u00b6 mutation SocialAuth($provider: String!, $accessToken: String!){ socialAuth(provider: $provider, accessToken: $accessToken){ uid avatar extraData errors success refreshToken { created isExpired expiresAt token revoked } token { token payload { exp origIat } } user { email archived dateJoined firstName isActive id isStaff isSuperuser lastLogin lastName logentrySet { pk } status { archived verified } verified } } } Contributing \u00b6 See CONTRIBUTING.md","title":"Start here"},{"location":"#strawberry-django-social-auth","text":"Django social authentication with Strawberry using Social Django .","title":"Strawberry-django Social Auth"},{"location":"#about","text":"","title":"About"},{"location":"#this-library-was-inspired-by-django-graphql-social-auth","text":"Django Social Auth for Strawberry Graphql engine.","title":"This Library was inspired by Django-graphql-social-auth."},{"location":"#docs-can-be-found-here","text":"","title":"Docs can be found here"},{"location":"#features","text":"Awesome docs! Social Auth Profile pic's URL storage in User's model Relay Support (Coming Soon...)","title":"Features"},{"location":"#installation","text":"pip install strawberry - django - social - auth - Add this for Avatar support in settings.py SOCIAL_AUTH_PIPELINE = [ ... 'gql_social_auth.pipeline.get_avatar' , # Get Avatar Pipeline ]","title":"Installation:"},{"location":"#usage","text":"Use built-In Mutation @strawberry . type class Mutation : social_auth = mutations . SocialAuth . field schema = strawberry . Schema ( query = Query , mutation = Mutation ) Customize the Usage of Mutation using the decorator from gql_social_auth.decorators import social_auth from gql_social_auth.types import SocialAuthInput @strawberry . type class CustomMutation : @strawberry . mutation @social_auth def social_auth ( self , info : Info , _input : SocialAuthInput , user , errors ) -> CustomReturnType : # user: User object from model # errors: If any errors occurred during the process of getting the social auth # Note: Any of the user or errors is None at a time, both can't be None at the same time... if errors is not None : # Handle Error here # Use user Object here...","title":"Usage:"},{"location":"#calling","text":"mutation SocialAuth($provider: String!, $accessToken: String!){ socialAuth(provider: $provider, accessToken: $accessToken){ uid avatar extraData errors success refreshToken { created isExpired expiresAt token revoked } token { token payload { exp origIat } } user { email archived dateJoined firstName isActive id isStaff isSuperuser lastLogin lastName logentrySet { pk } status { archived verified } verified } } }","title":"Calling:"},{"location":"#contributing","text":"See CONTRIBUTING.md","title":"Contributing"},{"location":"api/","text":"auto generated using pydoc_markdown SocialAuthMixin \u00b6 class SocialAuthMixin ( BaseMixin ) Social Auth takes OAuth Provider and OAuth Access Token Allow user to perform social auth for the given OAuth provider and OAuth Access token :returns user: Entire User Object (Get your social data using user.social_user) errors: Any error occurred in the process of getting the Social User social_auth \u00b6 def social_auth ( f ) Decorator for Getting social User. Use this decorator if you want to customize the SocialAuthMixin. :param f: Input: SocialAuthInput(provider, accessToken) :return: function with two additional arguments user: Entire User Object (Get your social data using user.social_user) errors: Any error occurred in the process of getting the Social User","title":"API"},{"location":"api/#socialauthmixin","text":"class SocialAuthMixin ( BaseMixin ) Social Auth takes OAuth Provider and OAuth Access Token Allow user to perform social auth for the given OAuth provider and OAuth Access token :returns user: Entire User Object (Get your social data using user.social_user) errors: Any error occurred in the process of getting the Social User","title":"SocialAuthMixin"},{"location":"api/#social_auth","text":"def social_auth ( f ) Decorator for Getting social User. Use this decorator if you want to customize the SocialAuthMixin. :param f: Input: SocialAuthInput(provider, accessToken) :return: function with two additional arguments user: Entire User Object (Get your social data using user.social_user) errors: Any error occurred in the process of getting the Social User","title":"social_auth"},{"location":"changelog/","text":"Release type: patch Update version to python@3.12","title":"Changelog"},{"location":"contributing/","text":"Contributing \u00b6 Thanks for helping improve Django GraphQL Auth! All kinds of contributions are welcome: Bug fixes Documentation improvements New features Refactoring Fix some typo Write more tests Getting started \u00b6 If you have a specific contribution in mind, be sure to check the issues and projects in progress - someone could already be working on something similar and you can help out. Project setup \u00b6 After cloning this repo, ensure dependencies are installed by running: make dev-setup and pip install tox Running tests \u00b6 After developing, you can run tests with: # python=3.7 and django=3.0 make test Single file test shortcut: # run only tests in tests/test_social_auth.py make test-file f = social_auth For live testing on a django project, you can use the testproject. Create a different virtualenv, install the dependencies again and run: cd testproject make install-local v = <CURRENT VERSION IN gql_social_auth.__init__> Opening Pull Requests \u00b6 Please fork the project and open a pull request against the main branch. This will trigger a series of tests and lint checks. We advise that you format and run lint locally before doing this to save time: make format make lint Documentation \u00b6 The documentation is generated using the excellent MkDocs with material theme . The documentation dependencies are installed by running: pip install -r docs/requirements.txt Then to produce a HTML version of the documentation, for live editing: make serve It will run the docs/pre_build.py script before building the docs.","title":"Contributing"},{"location":"contributing/#contributing","text":"Thanks for helping improve Django GraphQL Auth! All kinds of contributions are welcome: Bug fixes Documentation improvements New features Refactoring Fix some typo Write more tests","title":"Contributing"},{"location":"contributing/#getting-started","text":"If you have a specific contribution in mind, be sure to check the issues and projects in progress - someone could already be working on something similar and you can help out.","title":"Getting started"},{"location":"contributing/#project-setup","text":"After cloning this repo, ensure dependencies are installed by running: make dev-setup and pip install tox","title":"Project setup"},{"location":"contributing/#running-tests","text":"After developing, you can run tests with: # python=3.7 and django=3.0 make test Single file test shortcut: # run only tests in tests/test_social_auth.py make test-file f = social_auth For live testing on a django project, you can use the testproject. Create a different virtualenv, install the dependencies again and run: cd testproject make install-local v = <CURRENT VERSION IN gql_social_auth.__init__>","title":"Running tests"},{"location":"contributing/#opening-pull-requests","text":"Please fork the project and open a pull request against the main branch. This will trigger a series of tests and lint checks. We advise that you format and run lint locally before doing this to save time: make format make lint","title":"Opening Pull Requests"},{"location":"contributing/#documentation","text":"The documentation is generated using the excellent MkDocs with material theme . The documentation dependencies are installed by running: pip install -r docs/requirements.txt Then to produce a HTML version of the documentation, for live editing: make serve It will run the docs/pre_build.py script before building the docs.","title":"Documentation"},{"location":"contributors/","text":"Contributors \u00b6 @Shritesh99","title":"Contributors"},{"location":"contributors/#contributors","text":"@Shritesh99","title":"Contributors"}]}